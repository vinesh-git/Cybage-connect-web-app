#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CybageConnect
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CybageConnectDB")]
	public partial class CybageConnectLinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUserRegistration(UserRegistration instance);
    partial void UpdateUserRegistration(UserRegistration instance);
    partial void DeleteUserRegistration(UserRegistration instance);
    partial void InsertArticlesOfUser(ArticlesOfUser instance);
    partial void UpdateArticlesOfUser(ArticlesOfUser instance);
    partial void DeleteArticlesOfUser(ArticlesOfUser instance);
    partial void InsertBlogsOfUser(BlogsOfUser instance);
    partial void UpdateBlogsOfUser(BlogsOfUser instance);
    partial void DeleteBlogsOfUser(BlogsOfUser instance);
    partial void InsertProjectInsightsOfUser(ProjectInsightsOfUser instance);
    partial void UpdateProjectInsightsOfUser(ProjectInsightsOfUser instance);
    partial void DeleteProjectInsightsOfUser(ProjectInsightsOfUser instance);
    partial void Insertconnection(connection instance);
    partial void Updateconnection(connection instance);
    partial void Deleteconnection(connection instance);
    partial void InsertFriendRequest(FriendRequest instance);
    partial void UpdateFriendRequest(FriendRequest instance);
    partial void DeleteFriendRequest(FriendRequest instance);
    #endregion
		
		public CybageConnectLinqDataContext() : 
				base(global::CybageConnect.Properties.Settings.Default.CybageConnectDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CybageConnectLinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CybageConnectLinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CybageConnectLinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CybageConnectLinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserRegistration> UserRegistrations
		{
			get
			{
				return this.GetTable<UserRegistration>();
			}
		}
		
		public System.Data.Linq.Table<ArticlesOfUser> ArticlesOfUsers
		{
			get
			{
				return this.GetTable<ArticlesOfUser>();
			}
		}
		
		public System.Data.Linq.Table<BlogsOfUser> BlogsOfUsers
		{
			get
			{
				return this.GetTable<BlogsOfUser>();
			}
		}
		
		public System.Data.Linq.Table<ProjectInsightsOfUser> ProjectInsightsOfUsers
		{
			get
			{
				return this.GetTable<ProjectInsightsOfUser>();
			}
		}
		
		public System.Data.Linq.Table<connection> connections
		{
			get
			{
				return this.GetTable<connection>();
			}
		}
		
		public System.Data.Linq.Table<FriendRequest> FriendRequests
		{
			get
			{
				return this.GetTable<FriendRequest>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.OnAccept")]
		public int OnAccept([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> rid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> sid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rid, sid);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Ondelete")]
		public int Ondelete([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> rid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> sid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rid, sid);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SendRequest")]
		public int SendRequest([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> sid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> rid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sid, rid);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRegistration")]
	public partial class UserRegistration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _FullName;
		
		private string _UserName;
		
		private string _UserPassword;
		
		private string _Email;
		
		private System.Nullable<long> _MobileNumber;
		
		private EntitySet<ArticlesOfUser> _ArticlesOfUsers;
		
		private EntitySet<BlogsOfUser> _BlogsOfUsers;
		
		private EntitySet<ProjectInsightsOfUser> _ProjectInsightsOfUsers;
		
		private EntitySet<connection> _connections;
		
		private EntitySet<FriendRequest> _FriendRequests;
		
		private EntitySet<FriendRequest> _FriendRequests1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserPasswordChanging(string value);
    partial void OnUserPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMobileNumberChanging(System.Nullable<long> value);
    partial void OnMobileNumberChanged();
    #endregion
		
		public UserRegistration()
		{
			this._ArticlesOfUsers = new EntitySet<ArticlesOfUser>(new Action<ArticlesOfUser>(this.attach_ArticlesOfUsers), new Action<ArticlesOfUser>(this.detach_ArticlesOfUsers));
			this._BlogsOfUsers = new EntitySet<BlogsOfUser>(new Action<BlogsOfUser>(this.attach_BlogsOfUsers), new Action<BlogsOfUser>(this.detach_BlogsOfUsers));
			this._ProjectInsightsOfUsers = new EntitySet<ProjectInsightsOfUser>(new Action<ProjectInsightsOfUser>(this.attach_ProjectInsightsOfUsers), new Action<ProjectInsightsOfUser>(this.detach_ProjectInsightsOfUsers));
			this._connections = new EntitySet<connection>(new Action<connection>(this.attach_connections), new Action<connection>(this.detach_connections));
			this._FriendRequests = new EntitySet<FriendRequest>(new Action<FriendRequest>(this.attach_FriendRequests), new Action<FriendRequest>(this.detach_FriendRequests));
			this._FriendRequests1 = new EntitySet<FriendRequest>(new Action<FriendRequest>(this.attach_FriendRequests1), new Action<FriendRequest>(this.detach_FriendRequests1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(300)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileNumber", DbType="BigInt")]
		public System.Nullable<long> MobileNumber
		{
			get
			{
				return this._MobileNumber;
			}
			set
			{
				if ((this._MobileNumber != value))
				{
					this.OnMobileNumberChanging(value);
					this.SendPropertyChanging();
					this._MobileNumber = value;
					this.SendPropertyChanged("MobileNumber");
					this.OnMobileNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegistration_ArticlesOfUser", Storage="_ArticlesOfUsers", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<ArticlesOfUser> ArticlesOfUsers
		{
			get
			{
				return this._ArticlesOfUsers;
			}
			set
			{
				this._ArticlesOfUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegistration_BlogsOfUser", Storage="_BlogsOfUsers", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<BlogsOfUser> BlogsOfUsers
		{
			get
			{
				return this._BlogsOfUsers;
			}
			set
			{
				this._BlogsOfUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegistration_ProjectInsightsOfUser", Storage="_ProjectInsightsOfUsers", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<ProjectInsightsOfUser> ProjectInsightsOfUsers
		{
			get
			{
				return this._ProjectInsightsOfUsers;
			}
			set
			{
				this._ProjectInsightsOfUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegistration_connection", Storage="_connections", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<connection> connections
		{
			get
			{
				return this._connections;
			}
			set
			{
				this._connections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegistration_FriendRequest", Storage="_FriendRequests", ThisKey="UserId", OtherKey="ReceiverId")]
		public EntitySet<FriendRequest> FriendRequests
		{
			get
			{
				return this._FriendRequests;
			}
			set
			{
				this._FriendRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegistration_FriendRequest1", Storage="_FriendRequests1", ThisKey="UserId", OtherKey="senderID")]
		public EntitySet<FriendRequest> FriendRequests1
		{
			get
			{
				return this._FriendRequests1;
			}
			set
			{
				this._FriendRequests1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArticlesOfUsers(ArticlesOfUser entity)
		{
			this.SendPropertyChanging();
			entity.UserRegistration = this;
		}
		
		private void detach_ArticlesOfUsers(ArticlesOfUser entity)
		{
			this.SendPropertyChanging();
			entity.UserRegistration = null;
		}
		
		private void attach_BlogsOfUsers(BlogsOfUser entity)
		{
			this.SendPropertyChanging();
			entity.UserRegistration = this;
		}
		
		private void detach_BlogsOfUsers(BlogsOfUser entity)
		{
			this.SendPropertyChanging();
			entity.UserRegistration = null;
		}
		
		private void attach_ProjectInsightsOfUsers(ProjectInsightsOfUser entity)
		{
			this.SendPropertyChanging();
			entity.UserRegistration = this;
		}
		
		private void detach_ProjectInsightsOfUsers(ProjectInsightsOfUser entity)
		{
			this.SendPropertyChanging();
			entity.UserRegistration = null;
		}
		
		private void attach_connections(connection entity)
		{
			this.SendPropertyChanging();
			entity.UserRegistration = this;
		}
		
		private void detach_connections(connection entity)
		{
			this.SendPropertyChanging();
			entity.UserRegistration = null;
		}
		
		private void attach_FriendRequests(FriendRequest entity)
		{
			this.SendPropertyChanging();
			entity.UserRegistration = this;
		}
		
		private void detach_FriendRequests(FriendRequest entity)
		{
			this.SendPropertyChanging();
			entity.UserRegistration = null;
		}
		
		private void attach_FriendRequests1(FriendRequest entity)
		{
			this.SendPropertyChanging();
			entity.UserRegistration1 = this;
		}
		
		private void detach_FriendRequests1(FriendRequest entity)
		{
			this.SendPropertyChanging();
			entity.UserRegistration1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArticlesOfUsers")]
	public partial class ArticlesOfUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ArticleId;
		
		private System.Nullable<int> _UserId;
		
		private string _UserName;
		
		private string _Article;
		
		private System.DateTime _PublishedDate;
		
		private EntityRef<UserRegistration> _UserRegistration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArticleIdChanging(int value);
    partial void OnArticleIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnArticleChanging(string value);
    partial void OnArticleChanged();
    partial void OnPublishedDateChanging(System.DateTime value);
    partial void OnPublishedDateChanged();
    #endregion
		
		public ArticlesOfUser()
		{
			this._UserRegistration = default(EntityRef<UserRegistration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ArticleId
		{
			get
			{
				return this._ArticleId;
			}
			set
			{
				if ((this._ArticleId != value))
				{
					this.OnArticleIdChanging(value);
					this.SendPropertyChanging();
					this._ArticleId = value;
					this.SendPropertyChanged("ArticleId");
					this.OnArticleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserRegistration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Article", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Article
		{
			get
			{
				return this._Article;
			}
			set
			{
				if ((this._Article != value))
				{
					this.OnArticleChanging(value);
					this.SendPropertyChanging();
					this._Article = value;
					this.SendPropertyChanged("Article");
					this.OnArticleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishedDate", DbType="DateTime NOT NULL")]
		public System.DateTime PublishedDate
		{
			get
			{
				return this._PublishedDate;
			}
			set
			{
				if ((this._PublishedDate != value))
				{
					this.OnPublishedDateChanging(value);
					this.SendPropertyChanging();
					this._PublishedDate = value;
					this.SendPropertyChanged("PublishedDate");
					this.OnPublishedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegistration_ArticlesOfUser", Storage="_UserRegistration", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserRegistration UserRegistration
		{
			get
			{
				return this._UserRegistration.Entity;
			}
			set
			{
				UserRegistration previousValue = this._UserRegistration.Entity;
				if (((previousValue != value) 
							|| (this._UserRegistration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRegistration.Entity = null;
						previousValue.ArticlesOfUsers.Remove(this);
					}
					this._UserRegistration.Entity = value;
					if ((value != null))
					{
						value.ArticlesOfUsers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserRegistration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogsOfUsers")]
	public partial class BlogsOfUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogId;
		
		private System.Nullable<int> _UserId;
		
		private string _UserName;
		
		private string _Blog;
		
		private System.DateTime _PublishedDateOfBLog;
		
		private EntityRef<UserRegistration> _UserRegistration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnBlogChanging(string value);
    partial void OnBlogChanged();
    partial void OnPublishedDateOfBLogChanging(System.DateTime value);
    partial void OnPublishedDateOfBLogChanged();
    #endregion
		
		public BlogsOfUser()
		{
			this._UserRegistration = default(EntityRef<UserRegistration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserRegistration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Blog", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Blog
		{
			get
			{
				return this._Blog;
			}
			set
			{
				if ((this._Blog != value))
				{
					this.OnBlogChanging(value);
					this.SendPropertyChanging();
					this._Blog = value;
					this.SendPropertyChanged("Blog");
					this.OnBlogChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishedDateOfBLog", DbType="DateTime NOT NULL")]
		public System.DateTime PublishedDateOfBLog
		{
			get
			{
				return this._PublishedDateOfBLog;
			}
			set
			{
				if ((this._PublishedDateOfBLog != value))
				{
					this.OnPublishedDateOfBLogChanging(value);
					this.SendPropertyChanging();
					this._PublishedDateOfBLog = value;
					this.SendPropertyChanged("PublishedDateOfBLog");
					this.OnPublishedDateOfBLogChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegistration_BlogsOfUser", Storage="_UserRegistration", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserRegistration UserRegistration
		{
			get
			{
				return this._UserRegistration.Entity;
			}
			set
			{
				UserRegistration previousValue = this._UserRegistration.Entity;
				if (((previousValue != value) 
							|| (this._UserRegistration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRegistration.Entity = null;
						previousValue.BlogsOfUsers.Remove(this);
					}
					this._UserRegistration.Entity = value;
					if ((value != null))
					{
						value.BlogsOfUsers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserRegistration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectInsightsOfUsers")]
	public partial class ProjectInsightsOfUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectInsightId;
		
		private System.Nullable<int> _UserId;
		
		private string _UserName;
		
		private string _ProjectInsight;
		
		private System.DateTime _PublishedDateOfProjectInsight;
		
		private EntityRef<UserRegistration> _UserRegistration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectInsightIdChanging(int value);
    partial void OnProjectInsightIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnProjectInsightChanging(string value);
    partial void OnProjectInsightChanged();
    partial void OnPublishedDateOfProjectInsightChanging(System.DateTime value);
    partial void OnPublishedDateOfProjectInsightChanged();
    #endregion
		
		public ProjectInsightsOfUser()
		{
			this._UserRegistration = default(EntityRef<UserRegistration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectInsightId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectInsightId
		{
			get
			{
				return this._ProjectInsightId;
			}
			set
			{
				if ((this._ProjectInsightId != value))
				{
					this.OnProjectInsightIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectInsightId = value;
					this.SendPropertyChanged("ProjectInsightId");
					this.OnProjectInsightIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserRegistration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectInsight", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ProjectInsight
		{
			get
			{
				return this._ProjectInsight;
			}
			set
			{
				if ((this._ProjectInsight != value))
				{
					this.OnProjectInsightChanging(value);
					this.SendPropertyChanging();
					this._ProjectInsight = value;
					this.SendPropertyChanged("ProjectInsight");
					this.OnProjectInsightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishedDateOfProjectInsight", DbType="DateTime NOT NULL")]
		public System.DateTime PublishedDateOfProjectInsight
		{
			get
			{
				return this._PublishedDateOfProjectInsight;
			}
			set
			{
				if ((this._PublishedDateOfProjectInsight != value))
				{
					this.OnPublishedDateOfProjectInsightChanging(value);
					this.SendPropertyChanging();
					this._PublishedDateOfProjectInsight = value;
					this.SendPropertyChanged("PublishedDateOfProjectInsight");
					this.OnPublishedDateOfProjectInsightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegistration_ProjectInsightsOfUser", Storage="_UserRegistration", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserRegistration UserRegistration
		{
			get
			{
				return this._UserRegistration.Entity;
			}
			set
			{
				UserRegistration previousValue = this._UserRegistration.Entity;
				if (((previousValue != value) 
							|| (this._UserRegistration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRegistration.Entity = null;
						previousValue.ProjectInsightsOfUsers.Remove(this);
					}
					this._UserRegistration.Entity = value;
					if ((value != null))
					{
						value.ProjectInsightsOfUsers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserRegistration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.connections")]
	public partial class connection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ConnectId;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<int> _RqstCount;
		
		private EntityRef<UserRegistration> _UserRegistration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConnectIdChanging(int value);
    partial void OnConnectIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnRqstCountChanging(System.Nullable<int> value);
    partial void OnRqstCountChanged();
    #endregion
		
		public connection()
		{
			this._UserRegistration = default(EntityRef<UserRegistration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConnectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ConnectId
		{
			get
			{
				return this._ConnectId;
			}
			set
			{
				if ((this._ConnectId != value))
				{
					this.OnConnectIdChanging(value);
					this.SendPropertyChanging();
					this._ConnectId = value;
					this.SendPropertyChanged("ConnectId");
					this.OnConnectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserRegistration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RqstCount", DbType="Int")]
		public System.Nullable<int> RqstCount
		{
			get
			{
				return this._RqstCount;
			}
			set
			{
				if ((this._RqstCount != value))
				{
					this.OnRqstCountChanging(value);
					this.SendPropertyChanging();
					this._RqstCount = value;
					this.SendPropertyChanged("RqstCount");
					this.OnRqstCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegistration_connection", Storage="_UserRegistration", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserRegistration UserRegistration
		{
			get
			{
				return this._UserRegistration.Entity;
			}
			set
			{
				UserRegistration previousValue = this._UserRegistration.Entity;
				if (((previousValue != value) 
							|| (this._UserRegistration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRegistration.Entity = null;
						previousValue.connections.Remove(this);
					}
					this._UserRegistration.Entity = value;
					if ((value != null))
					{
						value.connections.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserRegistration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FriendRequests")]
	public partial class FriendRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReqId;
		
		private System.Nullable<int> _senderID;
		
		private System.Nullable<int> _ReceiverId;
		
		private string _RqstMessage;
		
		private EntityRef<UserRegistration> _UserRegistration;
		
		private EntityRef<UserRegistration> _UserRegistration1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReqIdChanging(int value);
    partial void OnReqIdChanged();
    partial void OnsenderIDChanging(System.Nullable<int> value);
    partial void OnsenderIDChanged();
    partial void OnReceiverIdChanging(System.Nullable<int> value);
    partial void OnReceiverIdChanged();
    partial void OnRqstMessageChanging(string value);
    partial void OnRqstMessageChanged();
    #endregion
		
		public FriendRequest()
		{
			this._UserRegistration = default(EntityRef<UserRegistration>);
			this._UserRegistration1 = default(EntityRef<UserRegistration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReqId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReqId
		{
			get
			{
				return this._ReqId;
			}
			set
			{
				if ((this._ReqId != value))
				{
					this.OnReqIdChanging(value);
					this.SendPropertyChanging();
					this._ReqId = value;
					this.SendPropertyChanged("ReqId");
					this.OnReqIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_senderID", DbType="Int")]
		public System.Nullable<int> senderID
		{
			get
			{
				return this._senderID;
			}
			set
			{
				if ((this._senderID != value))
				{
					if (this._UserRegistration1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsenderIDChanging(value);
					this.SendPropertyChanging();
					this._senderID = value;
					this.SendPropertyChanged("senderID");
					this.OnsenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverId", DbType="Int")]
		public System.Nullable<int> ReceiverId
		{
			get
			{
				return this._ReceiverId;
			}
			set
			{
				if ((this._ReceiverId != value))
				{
					if (this._UserRegistration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverIdChanging(value);
					this.SendPropertyChanging();
					this._ReceiverId = value;
					this.SendPropertyChanged("ReceiverId");
					this.OnReceiverIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RqstMessage", DbType="VarChar(50)")]
		public string RqstMessage
		{
			get
			{
				return this._RqstMessage;
			}
			set
			{
				if ((this._RqstMessage != value))
				{
					this.OnRqstMessageChanging(value);
					this.SendPropertyChanging();
					this._RqstMessage = value;
					this.SendPropertyChanged("RqstMessage");
					this.OnRqstMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegistration_FriendRequest", Storage="_UserRegistration", ThisKey="ReceiverId", OtherKey="UserId", IsForeignKey=true)]
		public UserRegistration UserRegistration
		{
			get
			{
				return this._UserRegistration.Entity;
			}
			set
			{
				UserRegistration previousValue = this._UserRegistration.Entity;
				if (((previousValue != value) 
							|| (this._UserRegistration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRegistration.Entity = null;
						previousValue.FriendRequests.Remove(this);
					}
					this._UserRegistration.Entity = value;
					if ((value != null))
					{
						value.FriendRequests.Add(this);
						this._ReceiverId = value.UserId;
					}
					else
					{
						this._ReceiverId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserRegistration");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegistration_FriendRequest1", Storage="_UserRegistration1", ThisKey="senderID", OtherKey="UserId", IsForeignKey=true)]
		public UserRegistration UserRegistration1
		{
			get
			{
				return this._UserRegistration1.Entity;
			}
			set
			{
				UserRegistration previousValue = this._UserRegistration1.Entity;
				if (((previousValue != value) 
							|| (this._UserRegistration1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRegistration1.Entity = null;
						previousValue.FriendRequests1.Remove(this);
					}
					this._UserRegistration1.Entity = value;
					if ((value != null))
					{
						value.FriendRequests1.Add(this);
						this._senderID = value.UserId;
					}
					else
					{
						this._senderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserRegistration1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
